name: Process GW2 Logs and Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'logs/**'
      - 'config/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  process-logs:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pathlib configparser pandas matplotlib seaborn plotly

    - name: Create working directories
      run: |
        New-Item -ItemType Directory -Path "prerequisites" -Force
        New-Item -ItemType Directory -Path "ei_output" -Force  
        New-Item -ItemType Directory -Path "combined_output" -Force
        New-Item -ItemType Directory -Path "docs" -Force

    - name: Download Elite Insights Parser
      run: |
        Set-Location "prerequisites"
        Write-Host "Downloading Elite Insights Parser..."
        Invoke-WebRequest -Uri "https://github.com/baaron4/GW2-Elite-Insights-Parser/releases/latest/download/GW2EICLI.zip" -OutFile "GW2EICLI.zip"
        Expand-Archive -Path "GW2EICLI.zip" -DestinationPath "." -Force
        Get-ChildItem -Path "GW2EICLI" -Recurse | Select-Object Name, Length

    - name: Download Old Parser (arcdps_top_stats_parser)
      run: |
        Set-Location "prerequisites"
        Write-Host "Downloading Old Parser..."
        Invoke-WebRequest -Uri "https://github.com/Drevarr/arcdps_top_stats_parser/archive/refs/heads/main.zip" -OutFile "parser.zip"
        Expand-Archive -Path "parser.zip" -DestinationPath "." -Force
        Move-Item -Path "arcdps_top_stats_parser-main" -Destination "arcdps_top_stats_parser" -Force
        Get-ChildItem -Path "arcdps_top_stats_parser" | Select-Object Name

    - name: Setup Python environment for old parser
      run: |
        Set-Location "prerequisites\arcdps_top_stats_parser"
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        }

    - name: Process logs with Elite Insights
      run: |
        $logFiles = Get-ChildItem -Path "logs\*.zevtc" -ErrorAction SilentlyContinue
        if ($logFiles) {
          Write-Host "Found $($logFiles.Count) log files to process"
          
          # Copy config file to Elite Insights directory
          Copy-Item -Path "config\EliteInsightsConfig.conf" -Destination "prerequisites\GW2EICLI\" -Force
          
          # Process each log file
          foreach ($logFile in $logFiles) {
            Write-Host "Processing: $($logFile.Name)"
            try {
              $process = Start-Process -FilePath "prerequisites\GW2EICLI\GuildWars2EliteInsights.exe" -ArgumentList "-c", "prerequisites\GW2EICLI\EliteInsightsConfig.conf", "-p", $logFile.FullName -Wait -PassThru -NoNewWindow
              if ($process.ExitCode -ne 0) {
                Write-Warning "Elite Insights returned exit code $($process.ExitCode) for $($logFile.Name)"
              }
            }
            catch {
              Write-Error "Failed to process $($logFile.Name): $($_.Exception.Message)"
            }
          }
          
          # Check output
          $outputFiles = Get-ChildItem -Path "ei_output" -ErrorAction SilentlyContinue
          if ($outputFiles) {
            Write-Host "Elite Insights generated $($outputFiles.Count) output files"
            $outputFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Warning "No output files generated by Elite Insights"
          }
        } else {
          Write-Host "No .zevtc files found in logs directory"
        }

    - name: Run old parser on Elite Insights output
      run: |
        $jsonFiles = Get-ChildItem -Path "ei_output\*.json" -ErrorAction SilentlyContinue
        if ($jsonFiles) {
          Write-Host "Running old parser on $($jsonFiles.Count) JSON files"
          Set-Location "prerequisites\arcdps_top_stats_parser"
          
          # Copy and modify config
          Copy-Item -Path "..\..\config\top_stats_config.ini" -Destination "." -Force
          
          # Update input directory path in config
          $configContent = Get-Content "top_stats_config.ini" -Raw
          $configContent = $configContent -replace 'input_directory = .*', 'input_directory = ../../ei_output'
          Set-Content "top_stats_config.ini" -Value $configContent -Encoding UTF8
          
          # Run the parser
          try {
            python top_stats_parser.py
            Write-Host "Old parser completed successfully"
          }
          catch {
            Write-Error "Old parser failed: $($_.Exception.Message)"
          }
          
          # Copy results to combined output
          if (Test-Path "output") {
            Copy-Item -Path "output\*" -Destination "..\..\combined_output\" -Recurse -Force
            Write-Host "Results copied to combined_output directory"
            
            $combinedFiles = Get-ChildItem -Path "..\..\combined_output\" -Recurse
            Write-Host "Combined output contains $($combinedFiles.Count) files:"
            $combinedFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Warning "No output directory found from old parser"
          }
        } else {
          Write-Host "No JSON files found from Elite Insights processing"
        }

    - name: Copy template files to docs
      run: |
        # Copy any existing template files from repo
        if (Test-Path "templates") {
          Copy-Item -Path "templates\*" -Destination "docs\" -Recurse -Force
        }
        
        # Copy generated analysis files
        if (Test-Path "combined_output") {
          Copy-Item -Path "combined_output\*" -Destination "docs\" -Recurse -Force
        }

    - name: Create index page if needed
      run: |
        if (-not (Test-Path "docs\index.html")) {
          Write-Host "Creating basic index.html"
          # Use a simple approach to avoid YAML/PowerShell string issues
          $indexContent = Get-Content "templates\index.html" -Raw -ErrorAction SilentlyContinue
          if (-not $indexContent) {
            $indexContent = "<!DOCTYPE html><html><head><title>GW2 Log Analysis</title></head><body><h1>GW2 Combat Log Analysis</h1><p>Analysis files will be listed here.</p></body></html>"
          }
          Set-Content -Path "docs\index.html" -Value $indexContent -Encoding UTF8
        }

    - name: List final output
      run: |
        Write-Host "Final docs directory contents:"
        Get-ChildItem -Path "docs" -Recurse | Select-Object Name, Length, LastWriteTime

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
