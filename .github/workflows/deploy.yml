name: Process GW2 Logs and Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'logs/**'
      - 'config/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  ELITE_INSIGHTS_VERSION: "latest"
  PYTHON_VERSION: "3.11"
  DOTNET_VERSION: "6.0.x"

jobs:
  process-logs:
    runs-on: windows-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install requests pathlib configparser pandas matplotlib seaborn plotly

    - name: Create working directories
      shell: pwsh
      run: |
        @("prerequisites", "ei_output", "combined_output", "docs") | ForEach-Object {
          New-Item -ItemType Directory -Path $_ -Force | Out-Null
        }
        Write-Host "Working directories created successfully"

    - name: Download and extract Elite Insights Parser
      shell: pwsh
      run: |
        $prereqPath = "prerequisites"
        Set-Location $prereqPath
        
        Write-Host "Downloading Elite Insights Parser..."
        $zipUrl = "https://github.com/baaron4/GW2-Elite-Insights-Parser/releases/latest/download/GW2EICLI.zip"
        Invoke-WebRequest -Uri $zipUrl -OutFile "GW2EICLI.zip" -UseBasicParsing
        
        Write-Host "Extracting to GW2EICLI directory..."
        Expand-Archive -Path "GW2EICLI.zip" -DestinationPath "GW2EICLI" -Force
        
        $exePath = "GW2EICLI/GuildWars2EliteInsights.exe"
        if (Test-Path $exePath) {
          Write-Host "Elite Insights extracted successfully: $exePath"
        } else {
          Write-Error "Elite Insights executable not found after extraction"
          exit 1
        }

    - name: Download and extract old parser
      shell: pwsh
      run: |
        Set-Location "prerequisites"
        
        Write-Host "Downloading arcdps_top_stats_parser..."
        $zipUrl = "https://github.com/Drevarr/arcdps_top_stats_parser/archive/refs/heads/main.zip"
        Invoke-WebRequest -Uri $zipUrl -OutFile "parser.zip" -UseBasicParsing
        
        Expand-Archive -Path "parser.zip" -DestinationPath "." -Force
        Move-Item -Path "arcdps_top_stats_parser-main" -Destination "arcdps_top_stats_parser" -Force
        
        Write-Host "Old parser extracted successfully"

    - name: Setup Python environment for old parser
      shell: pwsh
      run: |
        $parserPath = "prerequisites/arcdps_top_stats_parser"
        if (Test-Path "$parserPath/requirements.txt") {
          Set-Location $parserPath
          pip install -r requirements.txt
          Write-Host "Parser dependencies installed"
        }

    - name: Process logs with Elite Insights
      shell: pwsh
      run: |
        $logFiles = Get-ChildItem -Path "logs" -Filter "*.zevtc" -ErrorAction SilentlyContinue
        
        if (-not $logFiles) {
          Write-Host "No .zevtc files found in logs directory"
          return
        }
        
        Write-Host "Found $($logFiles.Count) log files to process"
        
        $eliteInsightsExe = "prerequisites/GW2EICLI/GuildWars2EliteInsights.exe"
        $configDestination = "prerequisites/GW2EICLI/EliteInsightsConfig.conf"
        
        if (-not (Test-Path $eliteInsightsExe)) {
          Write-Error "Elite Insights executable not found: $eliteInsightsExe"
          exit 1
        }
        
        Copy-Item -Path "config/EliteInsightsConfig.conf" -Destination $configDestination -Force
        Write-Host "Configuration file deployed"
        
        $successCount = 0
        foreach ($logFile in $logFiles) {
          Write-Host "Processing: $($logFile.Name)"
          
          $arguments = @("-c", $configDestination, "-p", $logFile.FullName)
          $process = Start-Process -FilePath $eliteInsightsExe -ArgumentList $arguments -Wait -PassThru -NoNewWindow
          
          if ($process.ExitCode -eq 0) {
            $successCount++
            Write-Host "  â Success"
          } else {
            Write-Warning "  â Failed with exit code $($process.ExitCode)"
          }
        }
        
        Write-Host "Processing complete: $successCount/$($logFiles.Count) files successful"
        
        $outputFiles = Get-ChildItem -Path "ei_output" -ErrorAction SilentlyContinue
        if ($outputFiles) {
          Write-Host "Generated $($outputFiles.Count) Elite Insights output files"
        }

    - name: Run old parser on Elite Insights output
      shell: pwsh
      run: |
        $jsonFiles = Get-ChildItem -Path "ei_output" -Filter "*.json" -ErrorAction SilentlyContinue
        
        if (-not $jsonFiles) {
          Write-Host "No JSON files found from Elite Insights processing"
          return
        }
        
        Write-Host "Running old parser on $($jsonFiles.Count) JSON files"
        Set-Location "prerequisites/arcdps_top_stats_parser"
        
        Copy-Item -Path "../../config/top_stats_config.ini" -Destination "." -Force
        
        $configContent = Get-Content "top_stats_config.ini" -Raw
        $updatedConfig = $configContent -replace 'input_directory\s*=.*', 'input_directory = ../../ei_output'
        Set-Content "top_stats_config.ini" -Value $updatedConfig -Encoding UTF8
        
        $parserScript = Get-ChildItem -Filter "TW5_parse_top_stats_detailed.py" -ErrorAction SilentlyContinue
        if (-not $parserScript) {
          $parserScript = Get-ChildItem -Filter "*top_stats*.py" | Select-Object -First 1
        }
        
        if ($parserScript) {
          Write-Host "Using parser script: $($parserScript.Name)"
          
          $pythonProcess = Start-Process -FilePath "python" -ArgumentList $parserScript.Name -Wait -PassThru -NoNewWindow
          if ($pythonProcess.ExitCode -eq 0) {
            Write-Host "Old parser completed successfully"
          } else {
            Write-Warning "Old parser failed with exit code $($pythonProcess.ExitCode)"
          }
        } else {
          Write-Warning "No suitable parser script found"
        }
        
        if (Test-Path "output") {
          Copy-Item -Path "output/*" -Destination "../../combined_output/" -Recurse -Force
          Write-Host "Parser results copied to combined_output"
        }

    - name: Prepare GitHub Pages content
      shell: pwsh
      run: |
        Write-Host "Preparing GitHub Pages content..."
        
        if (Test-Path "templates") {
          Copy-Item -Path "templates/*" -Destination "docs/" -Recurse -Force
          Write-Host "Template files copied"
        }
        
        if (Test-Path "combined_output") {
          Copy-Item -Path "combined_output/*" -Destination "docs/" -Recurse -Force
          Write-Host "Analysis files copied"
        }
        
        $docsFiles = Get-ChildItem -Path "docs" -Recurse -ErrorAction SilentlyContinue
        if ($docsFiles) {
          Write-Host "Docs directory contains $($docsFiles.Count) files ready for deployment"
        } else {
          Write-Warning "Docs directory is empty - creating placeholder"
          "# GW2 Log Analysis`n`nProcessing completed. Check back later for results." | Out-File -FilePath "docs/index.md" -Encoding UTF8
        }

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
