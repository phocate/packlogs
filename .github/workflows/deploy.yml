name: Process Logs and Deploy TiddlyWiki

on:
  push:
    branches: [ main ]
    paths:
      - 'logs/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  process-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: pip install xlrd xlutils xlwt jsons requests xlsxwriter
          
      - name: Download Elite Insights
        run: |
          Write-Host "Downloading Elite Insights..."
          Invoke-WebRequest -Uri "https://github.com/baaron4/GW2-Elite-Insights-Parser/releases/latest/download/GW2EI.zip" -OutFile "ei.zip"
          Expand-Archive -Path "ei.zip" -DestinationPath "EliteInsights"
          
      - name: Download arcdps parser scripts
        run: |
          Write-Host "Cloning parser repository..."
          git clone https://github.com/Drevarr/arcdps_top_stats_parser.git parser/
          
      - name: Create directories
        run: |
          New-Item -ItemType Directory -Force -Path "processed_logs"
          New-Item -ItemType Directory -Force -Path "tiddlers"
          New-Item -ItemType Directory -Force -Path "data"
          
      - name: Check for log files
        run: |
          Write-Host "=== LOG FILE ANALYSIS ==="
          $logFiles = Get-ChildItem -Path "logs" -Include "*.evtc", "*.zevtc" -Recurse -ErrorAction SilentlyContinue
          Write-Host "Found $($logFiles.Count) log files:"
          $logFiles | Format-Table Name, Length, Extension
          
          if ($logFiles.Count -eq 0) {
            Write-Host "##[error]No log files found in logs directory"
            exit 1
          }
          
      - name: Process EVTC logs with Elite Insights CLI
        run: |
          Write-Host "=== ELITE INSIGHTS CLI PROCESSING ==="
          
          Write-Host "Checking Elite Insights CLI directory structure:"
          Get-ChildItem "EliteInsights" -Recurse | Where-Object { $_.Name -like "*.exe" } | Format-Table Name, FullName
          
          $cliPath = Get-ChildItem "EliteInsights" -Recurse -Filter "*CLI*.exe" | Select-Object -First 1
          if (-not $cliPath) {
            $cliPath = Get-ChildItem "EliteInsights" -Recurse -Filter "GuildWars2EliteInsights.exe" | Select-Object -First 1
          }
          
          if (-not $cliPath) {
            Write-Host "##[error]No Elite Insights executable found"
            exit 1
          }
          
          Write-Host "Using CLI: $($cliPath.FullName)"
          
          Write-Host "Processing logs with Elite Insights CLI..."
          Write-Host "Command: $($cliPath.FullName) -p logs\ -o processed_logs\"
          
          & $cliPath.FullName -p "logs\" -o "processed_logs\"
          
          Write-Host "Elite Insights CLI processing completed"
          
          Write-Host "Checking Elite Insights output..."
          Get-ChildItem "processed_logs" | Format-Table Name, Length, Extension
          
          $jsonFiles = Get-ChildItem -Path "processed_logs" -Filter "*.json"
          Write-Host "Generated $($jsonFiles.Count) JSON files"
          
          if ($jsonFiles.Count -eq 0) {
            Write-Host "##[error]Elite Insights CLI failed to generate JSON files"
            Write-Host "Checking for any output files:"
            Get-ChildItem "processed_logs" -Recurse -ErrorAction SilentlyContinue | Format-Table Name, FullName
            exit 1
          }
          
      - name: Process logs with GW2 EI Log Combiner
        run: |
          Write-Host "=== GW2 EI LOG COMBINER PROCESSING ==="
          
          $jsonFiles = Get-ChildItem -Path "processed_logs" -Filter "*.json"
          Write-Host "Processing $($jsonFiles.Count) JSON files with Log Combiner"
          
          # Find the log combiner executable
          $combinerPath = Get-ChildItem "LogCombiner" -Recurse -Filter "*.exe" | Select-Object -First 1
          if (-not $combinerPath) {
            $combinerPath = Get-ChildItem "LogCombiner" -Recurse -Filter "*.py" | Where-Object { $_.Name -like "*main*" -or $_.Name -like "*combiner*" } | Select-Object -First 1
          }
          
          if (-not $combinerPath) {
            Write-Host "##[error]Could not find Log Combiner executable or script"
            Write-Host "Log Combiner contents:"
            Get-ChildItem "LogCombiner" -Recurse | Format-Table Name, FullName
            exit 1
          }
          
          Write-Host "Found Log Combiner: $($combinerPath.FullName)"
          
          if ($combinerPath.Extension -eq ".exe") {
            Write-Host "Running Log Combiner executable..."
            & $combinerPath.FullName --input "processed_logs" --output "tiddlers" --format tiddlywiki
          } else {
            Write-Host "Running Log Combiner Python script..."
            python $combinerPath.FullName --input "processed_logs" --output "tiddlers" --format tiddlywiki
          }
          
          Write-Host "Log Combiner completed"
          
          Write-Host "Generated tiddler files:"
          Get-ChildItem "tiddlers" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
          Write-Host "Generated data files:"
          Get-ChildItem "data" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
          Write-Host "Current directory tid files:"
          Get-ChildItem -Filter "*.tid" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
          Write-Host "JSON files in current directory:"
          Get-ChildItem -Filter "*Log_Summary*.json" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
      - name: Setup TiddlyWiki container
        run: |
          Write-Host "=== SETTING UP TIDDLYWIKI CONTAINER ==="
          
          # Check if we have the TiddlyWiki HTML file from the log combiner
          $tiddlyHtml = Get-ChildItem "LogCombiner" -Recurse -Filter "*Top_Stats_Index.html" | Select-Object -First 1
          
          if ($tiddlyHtml) {
            Write-Host "Found TiddlyWiki container: $($tiddlyHtml.FullName)"
            Copy-Item $tiddlyHtml.FullName -Destination "index.html"
          } else {
            Write-Host "No TiddlyWiki container found in LogCombiner, checking for standalone HTML..."
            $htmlFiles = Get-ChildItem "LogCombiner" -Recurse -Filter "*.html" | Select-Object -First 1
            
            if ($htmlFiles) {
              Write-Host "Using HTML file: $($htmlFiles.FullName)"
              Copy-Item $htmlFiles.FullName -Destination "index.html"
            } else {
              Write-Host "No HTML container found, downloading default TiddlyWiki..."
              Invoke-WebRequest -Uri "https://tiddlywiki.com/empty.html" -OutFile "index.html"
            }
          }
          
          Write-Host "TiddlyWiki container ready: index.html"
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
