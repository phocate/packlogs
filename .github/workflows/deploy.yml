name: Process Logs and Deploy TiddlyWiki

on:
  push:
    branches: [ main ]
    paths:
      - 'logs/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  process-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: pip install xlrd xlutils xlwt jsons requests xlsxwriter
          
      - name: Download Elite Insights
        run: |
          Write-Host "Downloading Elite Insights..."
          Invoke-WebRequest -Uri "https://github.com/baaron4/GW2-Elite-Insights-Parser/releases/latest/download/GW2EI.zip" -OutFile "ei.zip"
          Expand-Archive -Path "ei.zip" -DestinationPath "EliteInsights"
          
      - name: Download arcdps parser scripts
        run: |
          Write-Host "Cloning parser repository..."
          git clone https://github.com/Drevarr/arcdps_top_stats_parser.git parser/
          
      - name: Create directories
        run: |
          New-Item -ItemType Directory -Force -Path "processed_logs"
          New-Item -ItemType Directory -Force -Path "tiddlers"
          New-Item -ItemType Directory -Force -Path "data"
          
      - name: Check for log files
        run: |
          Write-Host "=== LOG FILE ANALYSIS ==="
          $logFiles = Get-ChildItem -Path "logs" -Include "*.evtc", "*.zevtc" -Recurse -ErrorAction SilentlyContinue
          Write-Host "Found $($logFiles.Count) log files:"
          $logFiles | Format-Table Name, Length, Extension
          
          if ($logFiles.Count -eq 0) {
            Write-Host "##[error]No log files found in logs directory"
            exit 1
          }
          
      - name: Process EVTC logs with Elite Insights
        run: |
          Write-Host "=== ELITE INSIGHTS PROCESSING ==="
          
          Write-Host "Checking Elite Insights directory structure:"
          Get-ChildItem "EliteInsights" -Recurse | Where-Object { $_.Name -like "*.exe" } | Format-Table Name, FullName
          
          $cliPath = Get-ChildItem "EliteInsights" -Recurse -Filter "*CLI*.exe" | Select-Object -First 1
          $guiPath = Get-ChildItem "EliteInsights" -Recurse -Filter "GuildWars2EliteInsights.exe" | Select-Object -First 1
          
          Write-Host "CLI found: $($cliPath -ne $null)"
          Write-Host "GUI found: $($guiPath -ne $null)"
          
          if ($cliPath) {
            Write-Host "Using CLI: $($cliPath.FullName)"
            $exePath = $cliPath.FullName
            $useGui = $false
          } elseif ($guiPath) {
            Write-Host "Using GUI with command line: $($guiPath.FullName)"
            $exePath = $guiPath.FullName
            $useGui = $true
          } else {
            Write-Host "##[error]No Elite Insights executable found"
            exit 1
          }
          
          Write-Host "Processing logs with Elite Insights..."
          
          if ($useGui) {
            Write-Host "Note: GUI version may ignore output directory parameter"
            Write-Host "Command: $exePath logs/*.zevtc"
            
            # GUI version: just pass the log files directly
            $logFiles = Get-ChildItem "logs" -Include "*.evtc", "*.zevtc" -Recurse
            foreach ($logFile in $logFiles) {
              Write-Host "Processing: $($logFile.Name)"
              & $exePath $logFile.FullName
            }
          } else {
            Write-Host "Command: $exePath -p logs\ -o processed_logs\ --save-output-file html json"
            & $exePath -p "logs\" -o "processed_logs\" --save-output-file html json
          }
          
          Write-Host "Elite Insights processing completed"
          
          Write-Host "Checking for output files in multiple locations..."
          
          # Check processed_logs directory
          Write-Host "Files in processed_logs:"
          Get-ChildItem "processed_logs" -ErrorAction SilentlyContinue | Format-Table Name, Length, Extension
          
          # Check logs directory (GUI might output here)
          Write-Host "Files in logs directory:"
          Get-ChildItem "logs" -Filter "*.json" -ErrorAction SilentlyContinue | Format-Table Name, Length, Extension
          Get-ChildItem "logs" -Filter "*.html" -ErrorAction SilentlyContinue | Format-Table Name, Length, Extension
          
          # Check current directory
          Write-Host "JSON/HTML files in current directory:"
          Get-ChildItem -Filter "*.json" -ErrorAction SilentlyContinue | Format-Table Name, Length, Extension
          Get-ChildItem -Filter "*.html" -ErrorAction SilentlyContinue | Format-Table Name, Length, Extension
          
          # Collect all generated files
          $allJsonFiles = @()
          $allHtmlFiles = @()
          
          $allJsonFiles += Get-ChildItem "processed_logs" -Filter "*.json" -ErrorAction SilentlyContinue
          $allJsonFiles += Get-ChildItem "logs" -Filter "*.json" -ErrorAction SilentlyContinue
          $allJsonFiles += Get-ChildItem -Filter "*.json" -ErrorAction SilentlyContinue
          
          $allHtmlFiles += Get-ChildItem "processed_logs" -Filter "*.html" -ErrorAction SilentlyContinue
          $allHtmlFiles += Get-ChildItem "logs" -Filter "*.html" -ErrorAction SilentlyContinue
          $allHtmlFiles += Get-ChildItem -Filter "*.html" -ErrorAction SilentlyContinue
          
          Write-Host "Total found: $($allJsonFiles.Count) JSON files and $($allHtmlFiles.Count) HTML files"
          
          # Move all output files to processed_logs directory
          if ($allJsonFiles.Count -gt 0 -or $allHtmlFiles.Count -gt 0) {
            Write-Host "Moving output files to processed_logs directory..."
            
            foreach ($file in $allJsonFiles) {
              if ($file.DirectoryName -ne (Resolve-Path "processed_logs").Path) {
                Write-Host "Moving JSON: $($file.Name)"
                Move-Item $file.FullName "processed_logs\" -Force
              }
            }
            
            foreach ($file in $allHtmlFiles) {
              if ($file.DirectoryName -ne (Resolve-Path "processed_logs").Path) {
                Write-Host "Moving HTML: $($file.Name)"
                Move-Item $file.FullName "processed_logs\" -Force
              }
            }
            
            Write-Host "Final processed_logs contents:"
            Get-ChildItem "processed_logs" | Format-Table Name, Length, Extension
          } else {
            Write-Host "##[error]Elite Insights failed to generate any output files"
            exit 1
          }
          
      - name: Process logs with Python parser
        run: |
          Write-Host "=== PYTHON PARSER PROCESSING ==="
          
          $jsonFiles = Get-ChildItem -Path "processed_logs" -Filter "*.json"
          $htmlFiles = Get-ChildItem -Path "processed_logs" -Filter "*.html"
          Write-Host "Processing $($jsonFiles.Count) JSON files and $($htmlFiles.Count) HTML files"
          
          Copy-Item "parser\TW5_parse_top_stats_detailed.py" -Destination "."
          Copy-Item "parser\TW5_parse_top_stats_tools.py" -Destination "."
          Copy-Item "parser\GW2_Data.py" -Destination "."
          Copy-Item "parser\GW2_Color_Scheme.py" -Destination "."
          
          if ($jsonFiles.Count -gt 0) {
            Write-Host "Running TW5 parser: python TW5_parse_top_stats_detailed.py processed_logs tiddlers data"
            python TW5_parse_top_stats_detailed.py "processed_logs" "tiddlers" "data"
            Write-Host "Python parser completed"
          } else {
            Write-Host "No JSON files found, skipping Python parser"
          }
          
          Write-Host "Generated tiddler files:"
          Get-ChildItem "tiddlers" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
          Write-Host "Generated data files:"
          Get-ChildItem "data" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
          Write-Host "Current directory contents:"
          Get-ChildItem -Filter "*.tid" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
          Write-Host "Generated files in processed_logs:"
          Get-ChildItem "processed_logs" -Filter "*.tid" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
      - name: Verify TiddlyWiki output
        run: |
          Write-Host "=== VERIFYING OUTPUT ==="
          
          Write-Host "Looking for TiddlyWiki HTML file..."
          $htmlFiles = Get-ChildItem -Filter "*.html" -ErrorAction SilentlyContinue
          if ($htmlFiles.Count -eq 0) {
            Write-Host "Checking in processed_logs for HTML..."
            $htmlFiles = Get-ChildItem "processed_logs" -Filter "*.html" -ErrorAction SilentlyContinue
          }
          
          Write-Host "HTML files found: $($htmlFiles.Count)"
          $htmlFiles | Format-Table Name, FullName, Length
          
          Write-Host "Looking for .tid files..."
          $tidFiles = @()
          $tidFiles += Get-ChildItem -Filter "*.tid" -ErrorAction SilentlyContinue
          $tidFiles += Get-ChildItem "tiddlers" -Filter "*.tid" -ErrorAction SilentlyContinue
          $tidFiles += Get-ChildItem "processed_logs" -Filter "*.tid" -ErrorAction SilentlyContinue
          
          Write-Host "Tiddler files found: $($tidFiles.Count)"
          $tidFiles | Format-Table Name, FullName, Length
          
          if ($htmlFiles.Count -eq 0 -and $tidFiles.Count -eq 0) {
            Write-Host "##[error]No TiddlyWiki files generated"
            Write-Host "Full directory listing:"
            Get-ChildItem -Recurse | Format-Table Name, FullName
            exit 1
          }
          
          if ($htmlFiles.Count -gt 0) {
            Write-Host "TiddlyWiki HTML container found"
          } else {
            Write-Host "No HTML container found - TiddlyWiki may need to be created separately"
          }
          
          Write-Host "Output ready for deployment"
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
