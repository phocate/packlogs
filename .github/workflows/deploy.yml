# Save this as: .github/workflows/deploy.yml

name: Process Logs and Deploy TiddlyWiki

on:
  push:
    branches: [ main ]
    paths:
      - 'logs/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  process-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: pip install xlrd xlutils xlwt jsons requests xlsxwriter
          
      - name: Download Elite Insights
        run: |
          Write-Host "Downloading Elite Insights..."
          Invoke-WebRequest -Uri "https://github.com/baaron4/GW2-Elite-Insights-Parser/releases/latest/download/GW2EI.zip" -OutFile "ei.zip"
          Expand-Archive -Path "ei.zip" -DestinationPath "EliteInsights"
          
          Write-Host "Elite Insights contents:"
          Get-ChildItem "EliteInsights" -Recurse | Format-Table Name, Length
          
      - name: Download arcdps parser scripts
        run: |
          Write-Host "Cloning parser repository..."
          git clone https://github.com/Drevarr/arcdps_top_stats_parser.git parser/
          
          Write-Host "Parser repository contents:"
          Get-ChildItem "parser" | Format-Table Name
          
      - name: Create directories and verify structure
        run: |
          New-Item -ItemType Directory -Force -Path "processed_logs"
          New-Item -ItemType Directory -Force -Path "tiddlers"
          New-Item -ItemType Directory -Force -Path "data"
          
          Write-Host "Repository structure:"
          Get-ChildItem -Recurse -Depth 2 | Where-Object { $_.PSIsContainer } | Format-Table Name, FullName
          
      - name: Check for log files
        run: |
          Write-Host "=== LOG FILE ANALYSIS ==="
          if (Test-Path "logs") {
            Write-Host "Logs directory exists"
            $allFiles = Get-ChildItem -Path "logs" -Recurse -ErrorAction SilentlyContinue
            Write-Host "All files in logs directory:"
            $allFiles | Format-Table Name, Length, Extension, LastWriteTime
            
            $logFiles = Get-ChildItem -Path "logs" -Include "*.evtc", "*.zevtc" -Recurse -ErrorAction SilentlyContinue
            Write-Host "Found $($logFiles.Count) log files:"
            $logFiles | Format-Table Name, Length, Extension
          } else {
            Write-Host "Logs directory does not exist"
            Write-Host "Creating empty logs directory for testing..."
            New-Item -ItemType Directory -Force -Path "logs"
          }
          
      - name: Process EVTC logs with Elite Insights
        run: |
          Write-Host "=== ELITE INSIGHTS PROCESSING ==="
          
          $LOG_COUNT = 0
          if (Test-Path "logs") {
            $LOG_COUNT = (Get-ChildItem -Path "logs" -Include "*.evtc", "*.zevtc" -Recurse -ErrorAction SilentlyContinue).Count
          }
          Write-Host "Found $LOG_COUNT log files"
          
          # Check for executables
          $cliExists = Test-Path "EliteInsights\GuildWars2EliteInsights-CLI.exe"
          $guiExists = Test-Path "EliteInsights\GuildWars2EliteInsights.exe"
          Write-Host "CLI exists: $cliExists"
          Write-Host "GUI exists: $guiExists"
          
          if ($LOG_COUNT -gt 0) {
            Write-Host "Processing $LOG_COUNT log files..."
            
            $configExists = Test-Path "parser\EI_config\EI_detailed_json_combat_replay.conf"
            Write-Host "Config file exists: $configExists"
            
            try {
              if ($configExists) {
                Write-Host "Using custom EI configuration"
                Copy-Item "parser\EI_config\EI_detailed_json_combat_replay.conf" -Destination "ei_config.conf"
                
                if ($cliExists) {
                  Write-Host "Running CLI with custom config..."
                  & "EliteInsights\GuildWars2EliteInsights-CLI.exe" -c "ei_config.conf" -p "logs\" -o "processed_logs\"
                } elseif ($guiExists) {
                  Write-Host "Running GUI with custom config..."
                  & "EliteInsights\GuildWars2EliteInsights.exe" -c "ei_config.conf" -p "logs\" -o "processed_logs\"
                } else {
                  Write-Error "No Elite Insights executable found"
                  throw "No executable found"
                }
              } else {
                Write-Host "Using default EI settings"
                
                if ($cliExists) {
                  Write-Host "Running CLI with default settings..."
                  & "EliteInsights\GuildWars2EliteInsights-CLI.exe" -p "logs\" -o "processed_logs\" --save-output-file json
                } elseif ($guiExists) {
                  Write-Host "Running GUI with default settings..."
                  & "EliteInsights\GuildWars2EliteInsights.exe" -p "logs\" -o "processed_logs\" --save-output-file json
                } else {
                  Write-Error "No Elite Insights executable found"
                  throw "No executable found"
                }
              }
              
              Write-Host "Elite Insights processing completed"
              
            } catch {
              Write-Host "Elite Insights processing failed: $($_.Exception.Message)"
              Write-Host "Creating dummy JSON for testing..."
              $dummyJson = @{
                fightName = "Test Fight"
                success = $true
                players = @(
                  @{
                    name = "Test Player"
                    profession = "Guardian"
                    dpsAll = @{ @{ damage = 50000 } }
                  }
                )
              }
              $dummyJson | ConvertTo-Json -Depth 10 | Out-File -FilePath "processed_logs\test_log.json" -Encoding utf8
            }
          } else {
            Write-Host "No log files found, creating test data for development..."
            $testJson = @{
              fightName = "Development Test"
              success = $true
              players = @(
                @{
                  name = "Dev Player"
                  profession = "Warrior"
                  dpsAll = @{ @{ damage = 25000 } }
                }
              )
            }
            $testJson | ConvertTo-Json -Depth 10 | Out-File -FilePath "processed_logs\dev_test.json" -Encoding utf8
          }
          
          Write-Host "Contents of processed_logs after EI:"
          Get-ChildItem "processed_logs" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
      - name: Setup Guild Data
        run: |
          Write-Host "=== GUILD DATA SETUP ==="
          Write-Host "Creating Guild_Data.py"
          
          $guildDataContent = @"
Guild_ID = ''
API_Key = ''
"@
          $guildDataContent | Out-File -FilePath "parser\Guild_Data.py" -Encoding utf8
          
          Write-Host "Guild_Data.py created successfully"
          Get-Content "parser\Guild_Data.py"
          
      - name: Generate TiddlyWiki content
        run: |
          Write-Host "=== TIDDLYWIKI CONTENT GENERATION ==="
          Set-Location "parser"
          
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Contents of processed_logs directory:"
          Get-ChildItem "..\processed_logs\" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
          $jsonFiles = Get-ChildItem -Path "..\processed_logs\" -Filter "*.json" -ErrorAction SilentlyContinue
          Write-Host "Found $($jsonFiles.Count) JSON files"
          
          if ($jsonFiles.Count -gt 0) {
            Write-Host "Generating TiddlyWiki content from $($jsonFiles.Count) processed logs..."
            
            Write-Host "Running Python script..."
            try {
              python TW5_parse_top_stats_detailed.py ../processed_logs/
              Write-Host "Python script completed successfully"
            } catch {
              Write-Host "Python script failed: $($_.Exception.Message)"
              Write-Host "Attempting alternative approach..."
              python -m TW5_parse_top_stats_detailed ../processed_logs/
            }
            
            Write-Host "Contents of processed_logs after Python processing:"
            Get-ChildItem "..\processed_logs\" -ErrorAction SilentlyContinue | Format-Table Name, Length
            
            # Copy generated files
            if (Test-Path "..\processed_logs\TW5_top_stats_detailed.tid") {
              Copy-Item "..\processed_logs\TW5_top_stats_detailed.tid" -Destination "..\tiddlers\"
              Write-Host "Copied main TID file"
            } else {
              Write-Host "WARNING: TW5_top_stats_detailed.tid not found"
            }
            
            $chartFiles = Get-ChildItem -Path "..\processed_logs\" -Filter "*_TW5_Chart.tid" -ErrorAction SilentlyContinue
            if ($chartFiles.Count -gt 0) {
              $chartFiles | Copy-Item -Destination "..\tiddlers\"
              Write-Host "Copied $($chartFiles.Count) chart files"
            } else {
              Write-Host "No chart TID files found"
            }
            
            $jsonDataFiles = Get-ChildItem -Path "..\processed_logs\" -Filter "*.json" -ErrorAction SilentlyContinue
            if ($jsonDataFiles.Count -gt 0) {
              $jsonDataFiles | Copy-Item -Destination "..\data\"
              Write-Host "Copied $($jsonDataFiles.Count) JSON data files"
            }
            
          } else {
            Write-Host "No JSON files found, creating placeholder content..."
            $placeholderContent = @"
title: PlaceholderStats
tags: WvWStats
type: text/vnd.tiddlywiki

!! No Combat Logs Found

No .evtc or .zevtc files were found in the logs directory. 

To use this system:
# Add your Guild Wars 2 combat log files (.evtc or .zevtc) to the `logs/` directory
# Commit and push the changes
# The GitHub Action will automatically process them and update this page

Current status: Waiting for log files...
"@
            $placeholderContent | Out-File -FilePath "..\tiddlers\placeholder.tid" -Encoding utf8
            Write-Host "Created placeholder TID file"
          }
          
          Set-Location ".."
          
          Write-Host "Final tiddlers directory contents:"
          Get-ChildItem "tiddlers" -ErrorAction SilentlyContinue | Format-Table Name, Length
          
      - name: Prepare TiddlyWiki HTML
        run: |
          Write-Host "=== TIDDLYWIKI HTML PREPARATION ==="
          
          if (-not (Test-Path "index.html")) {
            if (Test-Path "parser\example_output\TW5_Top_Stat_Parse.html") {
              Copy-Item "parser\example_output\TW5_Top_Stat_Parse.html" -Destination "index.html"
              Write-Host "Copied TiddlyWiki HTML from parser repository"
            } else {
              Write-Host "TW5_Top_Stat_Parse.html not found in parser/example_output/"
              Write-Host "Contents of parser directory:"
              Get-ChildItem "parser" -Recurse -Include "*.html" | Format-Table Name, FullName
              
              Write-Host "Creating basic HTML structure..."
              $htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>GW2 WvW Stats - FLUX CAPACITY</title>
    <meta charset="utf-8">
</head>
<body>
    <h1>FLUX CAPACITY - GW2 WvW Statistics</h1>
    <h2>System Status</h2>
    <p><strong>Status:</strong> TiddlyWiki container is working</p>
    <p><strong>Issue:</strong> No processed log data found</p>
    
    <h2>Next Steps</h2>
    <ol>
        <li>Add .evtc or .zevtc files to the logs/ directory</li>
        <li>Commit and push changes</li>
        <li>Wait for GitHub Actions to process the logs</li>
        <li>Check the Actions tab for detailed processing logs</li>
    </ol>
    
    <h2>Debug Information</h2>
    <p>If you're seeing this page, the workflow ran but either:</p>
    <ul>
        <li>No log files were found in the logs/ directory</li>
        <li>Elite Insights failed to process the logs</li>
        <li>The Python parsing script encountered an error</li>
        <li>The TiddlyWiki template is missing</li>
    </ul>
    
    <p>Check the GitHub Actions logs for detailed error information.</p>
</body>
</html>
"@
              $htmlContent | Out-File -FilePath "index.html" -Encoding utf8
            }
          } else {
            Write-Host "index.html already exists"
          }
          
      - name: Create artifact structure
        run: |
          Write-Host "=== ARTIFACT CREATION ==="
          
          New-Item -ItemType Directory -Force -Path "site"
          Copy-Item "index.html" -Destination "site\"
          Write-Host "Copied index.html to site directory"
          
          if (Test-Path "tiddlers") {
            $tidFiles = Get-ChildItem "tiddlers" -ErrorAction SilentlyContinue
            if ($tidFiles.Count -gt 0) {
              Copy-Item -Path "tiddlers" -Destination "site\" -Recurse -Force
              Write-Host "Copied tiddlers directory with $($tidFiles.Count) files"
              $tidFiles | Format-Table Name, Length
            } else {
              Write-Host "Tiddlers directory is empty"
            }
          } else {
            Write-Host "Tiddlers directory does not exist"
          }
          
          if (Test-Path "data") {
            $dataFiles = Get-ChildItem "data" -ErrorAction SilentlyContinue
            if ($dataFiles.Count -gt 0) {
              Copy-Item -Path "data" -Destination "site\" -Recurse -Force
              Write-Host "Copied data directory with $($dataFiles.Count) files"
            } else {
              Write-Host "Data directory is empty"
            }
          }
          
          Write-Host "Final site directory structure:"
          Get-ChildItem "site" -Recurse | Format-Table Name, FullName, Length
          
      - name: Generate deployment summary
        run: |
          Write-Host "=== DEPLOYMENT SUMMARY ==="
          
          $LOG_COUNT = 0
          $JSON_COUNT = 0
          $TID_COUNT = 0
          
          if (Test-Path "logs") {
            $LOG_COUNT = (Get-ChildItem -Path "logs" -Include "*.evtc", "*.zevtc" -Recurse -ErrorAction SilentlyContinue).Count
          }
          if (Test-Path "processed_logs") {
            $JSON_COUNT = (Get-ChildItem -Path "processed_logs" -Filter "*.json" -ErrorAction SilentlyContinue).Count
          }
          if (Test-Path "tiddlers") {
            $TID_COUNT = (Get-ChildItem -Path "tiddlers" -Filter "*.tid" -ErrorAction SilentlyContinue).Count
          }
          
          $summary = @(
            "## FLUX CAPACITY - Deployment Summary",
            "",
            "### File Counts",
            "- **Log files found:** $LOG_COUNT",
            "- **JSON files generated:** $JSON_COUNT", 
            "- **TiddlyWiki files created:** $TID_COUNT",
            "",
            "### Status",
            "- **Deployment time:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')",
            "- **Runner:** Windows",
            "- **Site URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/",
            "",
            "### Next Steps",
            if ($LOG_COUNT -eq 0) { "⚠️ **No log files found** - Add .evtc/.zevtc files to logs/ directory" }
            elseif ($JSON_COUNT -eq 0) { "⚠️ **Elite Insights processing failed** - Check logs above" }
            elseif ($TID_COUNT -eq 0) { "⚠️ **TiddlyWiki generation failed** - Check Python script logs" }
            else { "✅ **Processing completed successfully**" }
          )
          
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './site'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
